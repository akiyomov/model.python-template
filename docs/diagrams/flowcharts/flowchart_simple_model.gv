digraph G {
concentrate=true;
splines="ortho";
rankdir="LR";
subgraph legend{
    rank = min;
    label = "legend";
    Legend [shape=none, margin=0, label = <
        <table cellspacing="0" cellpadding="0" border="1"><tr><td>Code2flow Legend</td></tr><tr><td>
        <table cellspacing="0">
        <tr><td>Regular function</td><td width="50px" bgcolor='#cccccc'></td></tr>
        <tr><td>Trunk function (nothing calls this)</td><td bgcolor='#966F33'></td></tr>
        <tr><td>Leaf function (this calls nothing else)</td><td bgcolor='#6db33f'></td></tr>
        <tr><td>Function call</td><td><font color='black'>&#8594;</font></td></tr>
        </table></td></tr></table>
        >];
}node_33d89055 [label="57: __init__()" name="_base::SimpleModel.__init__" shape="rect" style="rounded,filled" fillcolor="#966F33" ];
node_54d1efb3 [label="343: __repr__()" name="_base::SimpleModel.__repr__" shape="rect" style="rounded,filled" fillcolor="#966F33" ];
node_39bb3a49 [label="338: __str__()" name="_base::SimpleModel.__str__" shape="rect" style="rounded,filled" fillcolor="#966F33" ];
node_1762cc5e [label="95: is_model_files_exist()" name="_base::SimpleModel.is_model_files_exist" shape="rect" style="rounded,filled" fillcolor="#6db33f" ];
node_3c06439e [label="187: is_similar()" name="_base::SimpleModel.is_similar" shape="rect" style="rounded,filled" fillcolor="#966F33" ];
node_a4ae0527 [label="211: is_trained()" name="_base::SimpleModel.is_trained" shape="rect" style="rounded,filled" fillcolor="#6db33f" ];
node_a8124193 [label="255: load()" name="_base::SimpleModel.load" shape="rect" style="rounded,filled" fillcolor="#cccccc" ];
node_1414d252 [label="152: predict()" name="_base::SimpleModel.predict" shape="rect" style="rounded,filled" fillcolor="#cccccc" ];
node_1ce3f768 [label="121: run()" name="_base::SimpleModel.run" shape="rect" style="rounded,filled" fillcolor="#966F33" ];
node_4ecfc6e0 [label="223: save()" name="_base::SimpleModel.save" shape="rect" style="rounded,filled" fillcolor="#966F33" ];
node_b51f2334 [label="169: score()" name="_base::SimpleModel.score" shape="rect" style="rounded,filled" fillcolor="#6db33f" ];
node_6eba13cd [label="139: train()" name="_base::SimpleModel.train" shape="rect" style="rounded,filled" fillcolor="#6db33f" ];
node_41cd2e35 [label="61: clean_obj_dict()" name="_utils::clean_obj_dict" shape="rect" style="rounded,filled" fillcolor="#6db33f" ];
node_27f38c22 [label="21: create_dir()" name="_utils::create_dir" shape="rect" style="rounded,filled" fillcolor="#6db33f" ];
node_6f54a3da [label="93: obj_to_repr()" name="_utils::obj_to_repr" shape="rect" style="rounded,filled" fillcolor="#6db33f" ];
node_33d89055 -> node_1762cc5e [color="#0072B2" penwidth="2"];
node_33d89055 -> node_a8124193 [color="#0072B2" penwidth="2"];
node_54d1efb3 -> node_6f54a3da [color="#009E73" penwidth="2"];
node_39bb3a49 -> node_41cd2e35 [color="#E69F00" penwidth="2"];
node_3c06439e -> node_1414d252 [color="#D55E00" penwidth="2"];
node_3c06439e -> node_b51f2334 [color="#D55E00" penwidth="2"];
node_a8124193 -> node_1762cc5e [color="#009E73" penwidth="2"];
node_1414d252 -> node_1414d252 [color="#56B4E9" penwidth="2"];
node_1ce3f768 -> node_a4ae0527 [color="#000000" penwidth="2"];
node_1ce3f768 -> node_1414d252 [color="#000000" penwidth="2"];
node_1ce3f768 -> node_6eba13cd [color="#000000" penwidth="2"];
node_4ecfc6e0 -> node_a4ae0527 [color="#000000" penwidth="2"];
node_4ecfc6e0 -> node_27f38c22 [color="#000000" penwidth="2"];
subgraph cluster_199fa34a {
    label="File: _base";
    name="_base";
    style="filled";
    graph[style=dotted];
    subgraph cluster_6f27d8fc {
        node_33d89055 node_1762cc5e node_1ce3f768 node_6eba13cd node_1414d252 node_b51f2334 node_3c06439e node_a4ae0527 node_4ecfc6e0 node_a8124193 node_39bb3a49 node_54d1efb3;
        label="Class: SimpleModel";
        name="SimpleModel";
        style="filled";
        graph[style=dotted];
    };
};
subgraph cluster_761cc120 {
    node_27f38c22 node_41cd2e35 node_6f54a3da;
    label="File: _utils";
    name="_utils";
    style="filled";
    graph[style=dotted];
};
}
